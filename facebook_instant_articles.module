<?php
/**
 * Implements hook_help().
 */
function facebook_instant_articles_menu() {
  $items['fbinstant.rss'] = array(
    'page callback' => 'facebook_instant_articles_rss_page',
    'file' => 'includes/rss.inc',
    'access arguments' => array('access content')
  );

  // Top level configuration page.
  $items['admin/config/services/facebook-instant-articles'] = array(
    'title' => 'Facebook Instant Articles Settings',
    'description' => 'Facebook Instant Articles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('facebook_instant_articles_admin_settings_form'),
    'access arguments' => array('access content'),
    'file' => 'includes/admin.inc',
  );

  // Configure Bazaarvoice settings.
  $items['admin/config/services/facebook-instant-articles/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function facebook_instant_articles_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/help#facebook-instant-articles':
      return t('This is the Facebook Instant Articles module, welcome!', array('@blocks' => url('admin/config/services/facebook-instant-articles'))) . '</p>';
  }
}

/**
 * Implements hook_form_alter().
 */
function facebook_instant_articles_form_node_type_form_alter(&$form, &$form_state) {

  // Add a vertical tab to the node type form.
  if (user_access('administer facebook instant articles')) {
    // Build fieldset for vertical tab section.
    $fieldset = array(
      '#type' => 'fieldset',
      '#title' => t('Facebook Instant Articles'),
      '#description' => t('Configure content type for Facebook Instant Article mappings.'),
      '#group' => 'additional_settings',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    // Has the section already been created (perhaps by a sub module)?
    if (isset($form['facebook_instant_articles'])) {
      // Add additional fieldset data.
      $form['facebook_instant_articles'] += $fieldset;
    }
    // Else, create the fieldset.
    else {
      $form['facebook_instant_articles'] = $fieldset;
    }

    // Is a Article type?
    $fb_instant_enabled = facebook_instant_articles_is_article_type('node', $form['#node_type']->type);

    // Previously checked the product checkbox?
    $previously_checked = (isset($form_state['values']) && $form_state['values']['facebook_instant_articles']['fb_instant_enabled']);
    // Have a stored product id?
    //$product_id = bazaarvoice_products_get_entity_type_product_id('node', $form['#node_type']->type);
    // Build the product checkbox.
    $form['facebook_instant_articles']['fb_instant_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Include Content Type in Facebook Instant Articles feed.'),
      '#description' => t('Enable content of this type to be included in the Facebook Instant Articles feed.'),
      '#weight' => 0,
      '#default_value' => ($previously_checked || $fb_instant_enabled) ? TRUE : FALSE,
    );

    // Add custom validate.
    //$form['#validate'][] = 'bazaarvoice_products_node_type_form_validate';
    // Add custom submit.
    $form['#submit'][] = 'facebook_instant_articles_node_type_form_submit';
  }
}

/**
 * Validation callback for node type form.
 */
function facebook_instant_articles_node_type_form_validate($form, &$form_state) {

}

/**
 * Submit callback for node type form.
 */
function facebook_instant_articles_node_type_form_submit($form, &$form_state) {

  $fb_instant_enabled = facebook_instant_articles_is_article_type('node', $form['#node_type']->type);

  if (!$fb_instant_enabled && $form_state['values']['fb_instant_enabled']) {
    // Save the new article type.
    facebook_instant_articles_set_entity_type('node', $form['#node_type']->type);
  }
  // Delete existing settings.
  elseif (!$form_state['values']['fb_instant_enabled']) {
    facebook_instant_articles_delete_entity_type('node', $form['#node_type']->type);
  }
}

/**
 * Boolean check to see if a given entity type and bundle are a product type.
 *
 * @param string $entity_type
 *   The entity type name.
 * @param string $bundle
 *   The entity bundle name.
 *
 * @return bool
 *   Boolean TRUE or FALSE.
 */
function facebook_instant_articles_is_article_type($entity_type, $bundle) {
  $is_type = FALSE;
  // Get array of entity types and bundles that are product types.
  if ($types = facebook_instant_articles_get_article_entity_types()) {
    // See if this entity type and bundle exists.
    if (isset($types[$entity_type]) && isset($types[$entity_type][$bundle])) {
      $is_type = TRUE;
    }
  }
  // Allow other modules to alter.
  drupal_alter('facebook_instant_articles_is_article_type', $is_type, $entity_type, $bundle);

  return $is_type;
}

/**
 * Return an array of entity types that are treated as products.
 *
 * @return mixed
 *   Array of entity types and bundles.
 */
function facebook_instant_articles_get_article_entity_types() {
  $entity_types = &drupal_static(__FUNCTION__);
  // Entity types not retrieved yet?
  if (!isset($entity_types)) {
    $results = db_select('facebook_instant_articles_entity_types', 'fbaet')
      ->fields('fbaet')
      ->execute();
    // Loop through each of the retrieved entity types.
    foreach ($results as $result) {
      $entity_types[$result->entity_type][$result->entity_bundle] = array(
        'type' => $result->entity_type,
        'bundle' => $result->entity_bundle,
      );
    }
    // Allow other modules to alter.
    drupal_alter('facebook_instant_articles_entity_types', $entity_types);
  }
  return $entity_types;
}

/**
 * Save the product id field for an entity type.
 *
 * @param string $type
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 * @param string $product_id_field
 *   The field name.
 */
function facebook_instant_articles_set_entity_type($type, $bundle) {
  db_insert('facebook_instant_articles_entity_types')
    ->fields(array(
      'entity_type' => $type,
      'entity_bundle' => $bundle,
    ))
    ->execute();
  // Allow other modules to perform actions.
  module_invoke_all('facebook_instant_articles_set_type', $type, $bundle);
}

/**
 * Delete the field set to be used as the product id for entity.
 *
 * @param string $type
 *   The entity type.
 * @param string $bundle
 *   The entity bundle.
 */
function facebook_instant_articles_delete_entity_type($type, $bundle) {
  db_delete('facebook_instant_articles_entity_types')
    ->condition('entity_type', $type)
    ->condition('entity_bundle', $bundle)
    ->execute();
  // Allow other modules to perform actions.
  module_invoke_all('facebook_instant_articles_delete_type', $type, $bundle);
}

/**
 * Return an array of nodes that are treated as articles.
 *
 * @return array
 *   Array of nodes.
 */
function facebook_instant_articles_get_article_nodes() {
  $nodes = array();
  $entity_types = facebook_instant_articles_get_article_entity_types();
  foreach($entity_types['node'] as $content_type => $entity_information) {
    $nodes += node_load_multiple(array(), array('type' => $content_type, 'status' => 1));
  }
  return $nodes;
}

/**
* Implements hook_entity_info_alter().
*/
function facebook_instant_articles_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['facebook_instant_article'] = array(
    'label' => t('Facebook Instant Articles'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_node_view().
 */
function facebook_instant_articles_node_view($node, $view_mode) {
  if ($view_mode == 'facebook_instant_article') {
    //exit(print_r($node));
    //$node->content['field_image']['#theme']
  }

  if ($view_mode != 'rss') {
    //book_node_view_link($node, $view_mode);
  }
}

/**
* Implements hook_preprocess_node().
*/
function facebook_instant_articles_preprocess_node(&$vars) {
  if($vars['view_mode'] == 'facebook_instant_article') {
    //exit(print_r($vars));
    $vars['theme_hook_suggestions'][] = 'node__facebook_instant_article';
  }
}

/**
 * Implements hook_theme().
 */
function facebook_instant_articles_theme() {
  return array(
    'node__facebook_instant_article' => array(
    'template' => 'node--facebook-instant-article',
    'path' => drupal_get_path('module', 'facebook_instant_articles') . '/theme',
    'render element' => 'elements',
  ),
 );
}

function facebook_instant_articles_theme_registry_alter(&$theme_registry) {
  //exit(print_r($theme_registry));
}
